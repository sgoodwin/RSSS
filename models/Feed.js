/*
 Pull in deps.
*/
var redis = require("redis"),
	client = redis.createClient(),
	async = require('async'),
	Item = require('./Item');

/*
 Feed encapsulates the feed-specific operations performed by the API.
 @constructor
*/
function Feed(hash){
	if(hash !== undefined){
		this.uid = hash.uid;
		this.title = hash.title;
		this.rssURL = hash.rssURL;
		this.htmlURL = hash.htmlURL;
		this.userID = '';
		this.tags = hash.tags;
	}
}

/*
 Generates an instanced of Feed with values retrieved from Redis given a feed's UID.
 @param {String} feedID The UID of the feed you wish to find.
 @return {Feed} A Feed instance with all values filled in
*/
Feed.find = function(feedID, cb){
	var dict = {};
	dict.uid = feedID.toString();
	var baseString = "feed:"+feedID;
	var keys = [baseString+":tags", baseString+":title", baseString+":rssURL", baseString+":htmlURL"];
	client.mget(keys, function(err, values){
		if(values[0] !== null){dict.tags = values[0].toString().split(',');}
		if(values[1] !== null) { dict.title = values[1].toString();}
		if(values[2] !== null) {dict.rssURL = values[2].toString();}
		if(values[3] !== null){dict.htmlURL = values[3].toString();}
		var newFeed = new Feed(dict);
		cb(err, newFeed);
	});
};

/*
 Generates the OPML for a list of feeds.
 @param {Array} array An array of Feed objects.
 @return {String} OPML line based on the feeds.
*/
Feed.opml = function(array){
	var string = "<?xml version=\"1.0\" encoding=\"UTF-8\"?> \
	<!-- OPML generated by RSSS --> \
	<opml version=\"1.1\"> \
	<head><title>mySubscriptions</title></head><body>";
	for(var i =0;i<=(array.length-1);i = i+1){
		string = string.concat(Feed.toOPML(array[i]));
	}
	return string.concat('</body></opml>');
};

/*
 Generates the OPML line for a given feed.
 @param {Feed} feed The Feed to convert.
 @return {String} OPML line based on the given feed.
*/
Feed.toOPML = function(feed){
	return "<outline text=\"" + feed.title + "\" description=\"\" title=\"" + feed.title + "\" type = \"rss\" version=\"RSS\" htmlURL = \""+feed.htmlURL+ "\" xmlUrl=\"" + feed.rssURL +"\"/>";
};

/*
 Generates the JSON representation of a feed object.
 @return {Hash} JSON-encoded representation of a feed.
*/
Feed.prototype.toJSON = function(){
	return {"uid":this.uid,"rssURL": this.rssURL,"htmlURL":this.htmlURL, "title":this.title};
};

/*
 Updates the values of a Feed from a new hash.
 @param {Hash} hash The hash of values to be assigned to the feed.
*/
Feed.prototype.update = function(hash){
	if(hash.title !== undefined){this.title = hash.title;}
	if(hash.rssURL !== undefined){this.rssURL = hash.rssURL;}
	if(hash.htmlURL !== undefined){this.htmlURL = hash.htmlURL;}	
};

/*
 Checks a feeds to see if it has the necessary values filled in.
 @return {Boolean} true if the Feed is valid, false if it is not.
*/
Feed.prototype.valid = function(){
	return (this.title !== undefined && this.rssURL !== undefined && this.htmlURL !== undefined);
};

/*
 Deletes all record of a Feed
 @param {Function(trueOrFalse)} cb A callback function to continue work based on wether or not the feed was successfully deleted.
 @return {Boolean} Indicates wether or not the delete was successful.
*/
Feed.prototype.destroy = function(cb){
	var baseString = "feed:"+this.uid;
	client.del([baseString+":title", baseString+":htmlURL", baseString+":rssURL"], function(err, retVal){
		cb(true);
	});
};

/*
 Retrieves the data for each Item associated with a given feed. Defined as a class method so that it can be used in async methods.
 @param {Feed} feed The feed you want to retrieve the items for.
 @param {function(err, results)} cb The function that will receieve the array of items and any errors that might have occurred.
 @return {Error} err Any errors encurred while looking up Items.
 @return {Array} results An Array of Items with info retrieved from Redis
*/
Feed.items = function(feed, cb){
	var itemsString = "feed:"+feed.uid+":items";
	client.smembers(itemsString, function(err, value){
		var ids = value !== null ? value.toString().split(',') : [];
		async.map(ids, Item.find, function(err, results){
			cb(err, results);
		});
	});
};

/*
 Adds a tag to a Feed's list of tags(or folders)
 @param {String} tag The tag you wish to add to a feed.
 @param {function(feed)} cb A callback function that gets this feed instance as it's parameter to continue work on a feed.
 @return {Feed} feed The feed after the given tag has been added.
*/
Feed.prototype.addTag = function(tag, cb){
	var feed = this;
	var baseString = "feed:"+this.uid;
	client.sadd(baseString+":tags", tag, function(err, retVal){
		feed.tags = feed.tags.concat(tag);
		cb(feed);
	});
};

/*
 Asks a Feed to commit it's data to Redis.
 @param {Function} cb A callback function that accepts on boolean argument indicating wether or not the save succeeded.
 @return {Boolean} An indication of wether or not the save succeeded.
*/
Feed.prototype.save = function(cb){
	var feed = this;
	if(this.valid()){
		if(feed.uid === undefined){
			client.incr('feedID', function(err, newid){
				feed.uid = newid;
				feed.storeValues(cb);
			});
		}else{
			feed.storeValues(cb);
		}
	}else{
		cb(false);
	}
};

/*
 Actually asks a Feed to commit it's data to Redis. Schema for a feed works like so:
 feed:uid:title, feed:uid:rssURL, feed:uid:htmlURL, feeds {feed:uid}
 @private
 @param {Function} cb A callback function that accepts on boolean argument indicating wether or not the save succeeded.
 @return {Boolean} An indication of wether or not the save succeeded.
*/
Feed.prototype.storeValues = function(cb){
	var feed = this;
	var baseString = "feed:"+feed.uid;
	var valuesAndKeys = [baseString+":title", feed.title, baseString+":rssURL", feed.rssURL, baseString+":htmlURL", feed.htmlURL];
	client.mset(valuesAndKeys, function(err, response){
		if(response === "OK"){
			client.sadd(feed.userID+":feeds", feed.uid, function(err, retVal){
				cb(true);
			});
		}else{
			cb(false);
		}
	});
};

module.exports = Feed;